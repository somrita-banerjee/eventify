generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model event_participants {
  id       String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  event_id String           @db.Uuid
  user_id  String           @db.Uuid
  role     participant_role
  events   events           @relation(fields: [event_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users    users            @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model events {
  id                 String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title              String               @db.VarChar
  description        String
  location           String               @db.VarChar
  start_time         DateTime             @db.Timestamptz(6)
  end_time           DateTime             @db.Timestamptz(6)
  is_cancelled       Boolean?             @default(false)
  created_by         String?              @db.Uuid
  created_at         DateTime?            @default(now()) @db.Timestamptz(6)
  event_participants event_participants[]
  users              users?               @relation(fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  resources          resources[]
  tasks              tasks[]
}

model resources {
  id           String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  event_id     String        @db.Uuid
  name         String        @db.VarChar
  type         resource_type
  allocated_to String?       @db.Uuid
  users        users?        @relation(fields: [allocated_to], references: [id], onDelete: NoAction, onUpdate: NoAction)
  events       events        @relation(fields: [event_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model tasks {
  id          String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  event_id    String        @db.Uuid
  title       String        @db.VarChar
  description String
  priority    task_priority
  status      task_status
  due_date    DateTime      @db.Timestamptz(6)
  assigned_to String        @db.Uuid
  users       users         @relation(fields: [assigned_to], references: [id], onDelete: NoAction, onUpdate: NoAction)
  events      events        @relation(fields: [event_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model users {
  id                 String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name               String               @db.VarChar
  email              String               @unique @db.VarChar
  password           String               @db.VarChar
  created_at         DateTime?            @default(now()) @db.Timestamptz(6)
  event_participants event_participants[]
  events             events[]
  resources          resources[]
  tasks              tasks[]
}

enum participant_role {
  organizer
  collaborator
  attendee
}

enum resource_type {
  venue
  equipment
  financial
  other
}

enum task_priority {
  low
  medium
  high
}

enum task_status {
  todo
  in_progress @map("in-progress")
  done
}
